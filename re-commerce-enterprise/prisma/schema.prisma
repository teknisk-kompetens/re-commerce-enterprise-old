
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Tables
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("user")
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Security Relations
  userRoles            UserRole[]
  userMFA              UserMFA[]
  userBiometric        UserBiometric[]
  trustedDevices       TrustedDevice[]
  accessRequests       AccessRequest[]
  jitAccessRequests    JITAccessRequest[]
  privilegedAccounts   PrivilegedAccount[]
  dataSubjectRequests  DataSubjectRequest[]
  
  // Advanced Security Relations
  webauthnCredentials  WebAuthnCredential[]
  biometricProfiles    BiometricProfile[]
  behavioralProfiles   BehavioralProfile[]
  
  // Task Management Relations
  assignedTasks        Task[]  @relation("UserTasks")

  // Widget Factory Relations
  createdBlueprints    WidgetBlueprint[] @relation("BlueprintCreator")
  canvasProjects       CanvasProject[]
  collaborationSessions CollaborationSession[]

  // Analytics Relations
  analyticsEvents      AnalyticsEvent[]
  metricSnapshots      MetricSnapshot[]

  // Integration Relations
  integrationTests     IntegrationTest[]
  apiConnectors        APIConnector[]

  // Audit Relations
  auditLogs           AuditLog[]
  complianceAudits    ComplianceAudit[]

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  plan      String   @default("basic")
  isActive  Boolean  @default(true)
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  // Analytics Relations
  analyticsEvents      AnalyticsEvent[]
  metricSnapshots      MetricSnapshot[]

  // Integration Relations
  integrationTests     IntegrationTest[]
  apiConnectors        APIConnector[]
  erpIntegrations      ERPIntegration[]
  crmIntegrations      CRMIntegration[]
  hrIntegrations       HRIntegration[]
  financialIntegrations FinancialIntegration[]
  cloudIntegrations    CloudIntegration[]
  communicationIntegrations CommunicationIntegration[]
  biIntegrations       BIIntegration[]

  // Widget Factory Relations
  widgetBlueprints     WidgetBlueprint[]
  canvasProjects       CanvasProject[]
  collaborationSessions CollaborationSession[]

  // Audit Relations
  auditLogs           AuditLog[]
  complianceAudits    ComplianceAudit[]

  // Security Relations
  securityEvents      SecurityEvent[]
  threatEvents        ThreatEvent[]

  @@map("tenants")
}

// Enhanced Authentication and MFA
model UserMFA {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  method   String
  secret   String
  verified Boolean @default(false)
  active   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_mfa")
}

model UserBiometric {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type     String
  template String
  deviceId String
  enrolled DateTime @default(now())
  lastUsed DateTime @default(now())
  active   Boolean @default(true)

  @@map("user_biometric")
}

model TrustedDevice {
  id              String   @id @default(cuid())
  deviceId        String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trusted         Boolean  @default(false)
  fingerprint     String
  platform        String
  browser         String
  location        String
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  riskScore       Int      @default(50)
  certificateHash String?

  @@unique([deviceId, userId])
  @@map("trusted_devices")
}

// Access Control and RBAC
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  permissions Json     @default("[]")
  inheritance Json     @default("[]")
  type        String   @default("custom")
  scope       String   @default("tenant")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  metadata    Json     @default("{}")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     String
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedBy String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  active     Boolean   @default(true)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model AccessRequest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    String
  action      String
  result      String
  reason      String
  evaluatedAt DateTime @default(now())
  evaluatedBy String
  riskScore   Int      @default(0)
  context     Json     @default("{}")
  permissions Json     @default("[]")
  conditions  Json     @default("[]")

  @@map("access_requests")
}

// Advanced Authentication - WebAuthn/FIDO2
model WebAuthnCredential {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId  String   @unique
  publicKey     String
  counter       BigInt   @default(0)
  deviceType    String   // "platform" or "roaming"
  transports    String[] // ["usb", "nfc", "ble", "internal"]
  attestation   Json     @default("{}")
  name          String   // User-friendly name
  lastUsed      DateTime @default(now())
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)

  @@map("webauthn_credentials")
}

model BiometricProfile {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // "fingerprint", "face", "voice", "behavioral"
  template      String   // Encrypted biometric template
  deviceId      String
  confidence    Float    @default(0.0)
  enrolledAt    DateTime @default(now())
  lastUsed      DateTime @default(now())
  usageCount    Int      @default(0)
  active        Boolean  @default(true)
  metadata      Json     @default("{}")

  @@map("biometric_profiles")
}

model BehavioralProfile {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keystrokeDynamics Json    @default("{}")
  mouseDynamics    Json    @default("{}")
  touchDynamics    Json    @default("{}")
  navigationPattern Json   @default("{}")
  timePattern      Json    @default("{}")
  devicePattern    Json    @default("{}")
  riskScore        Float   @default(0.0)
  confidence       Float   @default(0.0)
  learningPhase    Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastAnalyzed     DateTime @default(now())

  @@map("behavioral_profiles")
}

// Advanced Threat Intelligence
model ThreatIntelligenceFeed {
  id              String   @id @default(cuid())
  name            String
  provider        String
  type            String   // "commercial", "open_source", "government", "community"
  url             String
  format          String   // "json", "xml", "csv", "stix"
  updateFrequency Int      // in minutes
  lastUpdate      DateTime @default(now())
  active          Boolean  @default(true)
  reliability     Float    @default(0.0)
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  threatIndicators ThreatIndicator[]

  @@map("threat_intelligence_feeds")
}

model ThreatIndicator {
  id          String   @id @default(cuid())
  feedId      String
  feed        ThreatIntelligenceFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  type        ThreatIndicatorType
  value       String
  severity    ThreatSeverity
  confidence  Float    @default(0.0)
  tags        String[]
  description String?
  source      String?  // Source of the indicator
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  active      Boolean  @default(true)
  metadata    Json     @default("{}")

  threatEvents ThreatEvent[]

  @@unique([feedId, type, value])
  @@map("threat_indicators")
}

enum ThreatIndicatorType {
  email
  domain
  ip
  url
  hash
  user_agent
}

enum ThreatSeverity {
  low
  medium
  high
  critical
}

model ThreatEvent {
  id            String   @id @default(cuid())
  eventId       String   @unique
  timestamp     DateTime @default(now())
  type          String
  severity      String   // "low", "medium", "high", "critical"
  source        String
  destination   String
  protocol      String?
  description   String
  indicatorId   String?
  indicator     ThreatIndicator? @relation(fields: [indicatorId], references: [id])
  mitigation    String?
  status        String   @default("active") // "active", "investigating", "contained", "resolved"
  assignedTo    String?
  resolvedAt    DateTime?
  metadata      Json     @default("{}")
  aiAnalysis    Json     @default("{}")
  riskScore     Float    @default(0.0)
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("threat_events")
}

model APTCampaign {
  id              String   @id @default(cuid())
  name            String
  description     String
  threatActor     String
  firstSeen       DateTime @default(now())
  lastSeen        DateTime @default(now())
  tactics         String[] // MITRE ATT&CK tactics
  techniques      String[] // MITRE ATT&CK techniques
  indicators      Json     @default("[]")
  victims         Json     @default("[]")
  attribution     String?
  confidence      Float    @default(0.0)
  status          String   @default("active") // "active", "dormant", "defeated"
  aiPrediction    Json     @default("{}")
  huntingRules    Json     @default("[]")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("apt_campaigns")
}

// Zero Trust Network Architecture
model NetworkSegment {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "production", "staging", "development", "dmz", "internal"
  cidr          String
  vlanId        Int?
  trustLevel    Int      @default(0) // 0-100
  policies      Json     @default("[]")
  endpoints     Json     @default("[]")
  monitoring    Boolean  @default(true)
  isolation     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  deviceProfiles DeviceProfile[]

  @@map("network_segments")
}

model DeviceProfile {
  id              String   @id @default(cuid())
  deviceId        String   @unique
  name            String?
  type            String   // "laptop", "desktop", "mobile", "tablet", "iot", "server"
  os              String
  version         String
  manufacturer    String?
  model           String?
  macAddress      String?
  ipAddress       String?
  segmentId       String?
  segment         NetworkSegment? @relation(fields: [segmentId], references: [id])
  trustScore      Float    @default(0.0)
  riskLevel       String   @default("medium") // "low", "medium", "high", "critical"
  lastSeen        DateTime @default(now())
  enrolled        Boolean  @default(false)
  compliance      Json     @default("{}")
  vulnerabilities Json     @default("[]")
  certificates    Json     @default("[]")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("device_profiles")
}

// Advanced Cryptography
model CryptographicKey {
  id            String   @id @default(cuid())
  keyId         String   @unique
  type          String   // "aes", "rsa", "ecc", "quantum_resistant", "homomorphic"
  algorithm     String
  keySize       Int
  purpose       String   // "encryption", "signing", "kex", "authentication"
  scope         String   // "user", "system", "tenant", "global"
  encryptedKey  String   // Key encrypted with master key
  publicKey     String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  rotatedAt     DateTime?
  status        String   @default("active") // "active", "revoked", "expired", "compromised"
  metadata      Json     @default("{}")
  usageCount    Int      @default(0)
  lastUsed      DateTime @default(now())

  @@map("cryptographic_keys")
}

model DataClassification {
  id            String   @id @default(cuid())
  dataId        String   @unique
  classification String  // "public", "internal", "confidential", "restricted", "top_secret"
  sensitivity   String   // "low", "medium", "high", "critical"
  categories    String[] // "pii", "phi", "financial", "legal", "technical"
  retentionDays Int?
  encryptionReq Boolean  @default(false)
  accessControl Json     @default("{}")
  complianceReq String[] // "gdpr", "hipaa", "sox", "pci_dss"
  aiClassified  Boolean  @default(false)
  confidence    Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@map("data_classifications")
}

// Security Orchestration
model SecurityPlaybook {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "incident_response", "threat_hunting", "compliance", "automation"
  severity      String   // "low", "medium", "high", "critical"
  triggers      Json     @default("[]")
  actions       Json     @default("[]")
  conditions    Json     @default("[]")
  automationLevel String @default("manual") // "manual", "semi_automated", "fully_automated"
  active        Boolean  @default(true)
  version       String   @default("1.0")
  aiEnhanced    Boolean  @default(false)
  successRate   Float    @default(0.0)
  avgExecutionTime Int   @default(0) // in seconds
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  executions SecurityPlaybookExecution[]

  @@map("security_playbooks")
}

model SecurityPlaybookExecution {
  id          String   @id @default(cuid())
  playbookId  String
  playbook    SecurityPlaybook @relation(fields: [playbookId], references: [id], onDelete: Cascade)
  executionId String   @unique
  triggeredBy String
  startTime   DateTime @default(now())
  endTime     DateTime?
  status      String   @default("running") // "running", "completed", "failed", "cancelled"
  steps       Json     @default("[]")
  results     Json     @default("{}")
  errors      Json     @default("[]")
  aiDecisions Json     @default("[]")
  metadata    Json     @default("{}")

  @@map("security_playbook_executions")
}

model SecurityIncident {
  id            String   @id @default(cuid())
  incidentId    String   @unique
  title         String
  description   String
  type          String   // "data_breach", "malware", "phishing", "insider_threat", "ddos"
  severity      String   // "low", "medium", "high", "critical"
  priority      String   @default("medium") // "low", "medium", "high", "critical"
  status        String   @default("open") // "open", "investigating", "contained", "resolved", "closed"
  assignedTo    String?
  reportedBy    String
  reportedAt    DateTime @default(now())
  detectedAt    DateTime?
  containedAt   DateTime?
  resolvedAt    DateTime?
  impact        String   // "low", "medium", "high", "critical"
  affectedSystems Json   @default("[]")
  timeline      Json     @default("[]")
  artifacts     Json     @default("[]")
  mitigation    String?
  rootCause     String?
  lessons       String?
  aiAnalysis    Json     @default("{}")
  riskScore     Float    @default(0.0)
  metadata      Json     @default("{}")

  @@map("security_incidents")
}

// Advanced Compliance
model ComplianceFramework {
  id            String   @id @default(cuid())
  name          String
  version       String
  type          String   // "regulatory", "industry", "internal", "international"
  description   String
  requirements  Json     @default("[]")
  controls      Json     @default("[]")
  active        Boolean  @default(true)
  mandatory     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  assessments ComplianceAssessment[]

  @@unique([name, version])
  @@map("compliance_frameworks")
}

model ComplianceAssessment {
  id             String   @id @default(cuid())
  frameworkId    String
  framework      ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  assessmentId   String   @unique
  standardId     String?  // Optional standard identifier
  type           String   // "automated", "manual", "hybrid"
  assessmentType String   @default("automated") // Additional assessment type field
  status         String   @default("planned") // "planned", "in_progress", "completed", "failed"
  scope          Json     @default("{}")
  findings       Json     @default("[]")
  score          Float    @default(0.0)
  riskLevel      String   @default("medium") // "low", "medium", "high", "critical"
  startedAt      DateTime @default(now())
  completedAt    DateTime?
  assessor       String
  evidence       Json     @default("[]")
  remediation    Json     @default("[]")
  aiAnalysis     Json     @default("{}")
  metadata       Json     @default("{}")

  @@map("compliance_assessments")
}

// Security Analytics
model SecurityMetric {
  id            String   @id @default(cuid())
  metricId      String   @unique
  name          String
  type          String   // "counter", "gauge", "histogram", "summary"
  category      String   // "threats", "incidents", "compliance", "performance"
  value         Float
  timestamp     DateTime @default(now())
  dimensions    Json     @default("{}")
  aiPrediction  Json     @default("{}")
  metadata      Json     @default("{}")

  @@map("security_metrics")
}

model SecurityDashboard {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "executive", "operational", "tactical", "strategic"
  layout        Json     @default("{}")
  widgets       Json     @default("[]")
  filters       Json     @default("{}")
  refreshRate   Int      @default(300) // in seconds
  access        Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  @@map("security_dashboards")
}

// Project and Task Management
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  tenantId    String

  tasks Task[]

  @@map("projects")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo  String?
  assignedUser User?   @relation("UserTasks", fields: [assignedTo], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?
  completedAt DateTime?

  @@map("tasks")
}

// Behavioral Anomaly Detection
model BehavioralAnomaly {
  id            String   @id @default(cuid())
  userId        String
  type          String   // "login_pattern", "access_pattern", "data_access", "time_pattern"
  severity      String   // "low", "medium", "high", "critical"
  description   String
  detected      DateTime @default(now())
  confidence    Float    @default(0.0)
  riskScore     Float    @default(0.0)
  status        String   @default("active") // "active", "investigating", "resolved", "false_positive"
  metadata      Json     @default("{}")
  aiAnalysis    Json     @default("{}")

  @@map("behavioral_anomalies")
}

// System Configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  type        String   @default("string") // "string", "number", "boolean", "json"
  category    String   @default("general")
  encrypted   Boolean  @default(false)
  isSecret    Boolean  @default(false)
  updatedBy   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("system_config")
}

model JITAccessRequest {
  id                   String    @id @default(cuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestedRole        String
  requestedPermissions Json      @default("[]")
  justification        String
  duration             Int
  status               String    @default("pending")
  requestedAt          DateTime  @default(now())
  approver             String?
  approvedAt           DateTime?
  expiresAt            DateTime?
  revokedAt            DateTime?
  revokedBy            String?
  accessGranted        Boolean   @default(false)
  metadata             Json      @default("{}")

  @@map("jit_access_requests")
}

model PrivilegedAccount {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountType  String
  privileges   Json     @default("[]")
  justification String
  approvedBy   String
  approvedAt   DateTime @default(now())
  expiresAt    DateTime
  active       Boolean  @default(true)
  lastUsed     DateTime?
  usageCount   Int      @default(0)
  monitoring   Boolean  @default(true)

  @@map("privileged_accounts")
}

model AccessReview {
  id            String    @id @default(cuid())
  type          String
  target        String
  reviewer      String
  status        String    @default("pending")
  scheduledAt   DateTime
  startedAt     DateTime?
  completedAt   DateTime?
  findings      Json      @default("[]")
  recommendations Json    @default("[]")
  nextReview    DateTime
  metadata      Json      @default("{}")

  @@map("access_reviews")
}

model DynamicRole {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  rules        Json     @default("[]")
  conditions   Json     @default("[]")
  autoAssign   Boolean  @default(true)
  autoRevoke   Boolean  @default(true)
  maxDuration  Int      @default(480)
  reviewRequired Boolean @default(false)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("dynamic_roles")
}

// Security Events and SIEM
model SecurityEvent {
  id                  String   @id @default(cuid())
  timestamp           DateTime @default(now())
  source              String
  type                String
  category            String
  severity            String
  description         String
  actor               String
  target              String
  outcome             String
  ipAddress           String
  userAgent           String
  location            String?
  metadata            Json     @default("{}")
  correlated          Boolean  @default(false)
  correlationId       String?
  investigationStatus String   @default("none")
  tenantId            String?
  tenant              Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("security_events")
}

model SecurityAlert {
  id                String    @id @default(cuid())
  timestamp         DateTime  @default(now())
  type              String
  severity          String
  title             String
  description       String
  source            String
  affectedAssets    Json      @default("[]")
  indicators        Json      @default("[]")
  recommendedActions Json     @default("[]")
  status            String    @default("active")
  assignedTo        String?
  acknowledgedBy    String?
  acknowledgedAt    DateTime?
  resolvedBy        String?
  resolvedAt        DateTime?
  escalationLevel   Int       @default(0)
  lastEscalation    DateTime?
  suppressUntil     DateTime?
  relatedEvents     Json      @default("[]")
  playbook          String?

  @@map("security_alerts")
}

model ForensicInvestigation {
  id              String    @id @default(cuid())
  caseId          String    @unique
  type            String
  status          String    @default("initiated")
  priority        String
  investigator    String
  startDate       DateTime  @default(now())
  endDate         DateTime?
  findings        Json      @default("[]")
  recommendations Json      @default("[]")
  report          String?

  @@map("forensic_investigations")
}

model ForensicEvidence {
  id              String   @id @default(cuid())
  investigationId String
  type            String
  source          String
  hash            String
  timestamp       DateTime @default(now())
  description     String
  preserved       Boolean  @default(true)
  chainOfCustody  Json     @default("[]")

  @@map("forensic_evidence")
}

model ThreatHuntingQuery {
  id          String    @id @default(cuid())
  name        String
  description String
  query       String
  language    String
  category    String
  severity    String
  schedule    String
  enabled     Boolean   @default(true)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastRun     DateTime?
  nextRun     DateTime?

  @@map("threat_hunting_queries")
}

// Compliance and Data Protection
model ComplianceAudit {
  id            String   @id @default(cuid())
  standardId    String
  requirementId String
  assessorId    String
  assessor      User     @relation(fields: [assessorId], references: [id])
  assessment    Json
  timestamp     DateTime @default(now())
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("compliance_audits")
}



model DataSubjectRequest {
  id            String    @id @default(cuid())
  type          String
  subjectEmail  String
  description   String
  requestDate   DateTime  @default(now())
  dueDate       DateTime
  status        String    @default("received")
  response      String?
  completedDate DateTime?
  handledBy     String
  user          User      @relation(fields: [handledBy], references: [id])

  @@map("data_subject_requests")
}

// Data Encryption and Security
model EncryptionKey {
  id               String    @id @default(cuid())
  name             String
  algorithm        String
  key              String
  iv               String?
  purpose          String
  status           String    @default("active")
  createdAt        DateTime  @default(now())
  rotatedAt        DateTime?
  expiresAt        DateTime?
  rotationSchedule Int       @default(90)

  @@map("encryption_keys")
}

model EncryptedData {
  id           String   @id @default(cuid())
  data         String
  keyId        String
  algorithm    String
  iv           String?
  tag          String?
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  accessCount  Int      @default(0)
  lastAccessed DateTime @default(now())

  @@map("encrypted_data")
}

model EncryptionAudit {
  id        String   @id @default(cuid())
  type      String
  keyId     String?
  dataId    String?
  userId    String
  action    String
  result    String
  timestamp DateTime @default(now())
  details   Json     @default("{}")
  ipAddress String
  userAgent String

  @@map("encryption_audits")
}

model KeyRotationEvent {
  id              String   @id @default(cuid())
  keyId           String
  oldKeyId        String
  reason          String
  timestamp       DateTime @default(now())
  initiatedBy     String
  status          String
  affectedRecords Int      @default(0)

  @@map("key_rotation_events")
}

model DLPViolation {
  id          String   @id @default(cuid())
  ruleId      String
  userId      String
  dataType    String
  severity    String
  action      String
  description String
  remediation String
  status      String   @default("detected")
  timestamp   DateTime @default(now())
  evidence    Json     @default("[]")

  @@map("dlp_violations")
}



model PlaybookExecution {
  id          String    @id @default(cuid())
  playbookId  String
  triggeredBy String
  triggerType String
  status      String    @default("running")
  startTime   DateTime  @default(now())
  endTime     DateTime?
  duration    Int?
  steps       Json      @default("[]")
  variables   Json      @default("{}")
  logs        Json      @default("[]")
  error       String?
  metadata    Json      @default("{}")

  @@map("playbook_executions")
}

model VulnerabilityAssessment {
  id              String    @id @default(cuid())
  type            String
  target          String
  status          String    @default("scheduled")
  startTime       DateTime  @default(now())
  endTime         DateTime?
  findings        Json      @default("[]")
  scanProfile     String
  configuration   Json      @default("{}")
  executedBy      String
  reportGenerated Boolean   @default(false)
  report          String?

  @@map("vulnerability_assessments")
}

model PolicyEnforcement {
  id             String   @id @default(cuid())
  policyId       String
  type           String
  target         String
  status         String   @default("active")
  rules          Json     @default("[]")
  violations     Json     @default("[]")
  lastCheck      DateTime @default(now())
  nextCheck      DateTime
  checkFrequency Int      @default(60)
  enabled        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("policy_enforcements")
}

model AutomatedResponse {
  id             String    @id @default(cuid())
  name           String
  description    String
  triggers       Json      @default("[]")
  actions        Json      @default("[]")
  conditions     Json      @default("[]")
  enabled        Boolean   @default(true)
  priority       Int       @default(1)
  cooldown       Int       @default(300)
  maxExecutions  Int       @default(100)
  executionCount Int       @default(0)
  lastExecuted   DateTime?
  successRate    Float     @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("automated_responses")
}

model ComplianceCheck {
  id             String    @id @default(cuid())
  standardId     String
  requirementId  String
  checkType      String
  frequency      String
  script         String?
  parameters     Json      @default("{}")
  expectedResult Json?
  actualResult   Json?
  status         String    @default("pending")
  lastCheck      DateTime  @default(now())
  nextCheck      DateTime
  evidence       Json      @default("[]")
  issues         Json      @default("[]")
  enabled        Boolean   @default(true)

  @@map("compliance_checks")
}

// WAF and Production Security
model WAFRule {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String
  priority    Int
  enabled     Boolean  @default(true)
  pattern     String
  patternType String
  target      String
  action      Json     @default("{}")
  conditions  Json     @default("[]")
  exceptions  Json     @default("[]")
  statistics  Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("waf_rules")
}

model WAFEvent {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  ruleId       String
  ruleName     String
  action       String
  blocked      Boolean
  source       String
  target       String
  userAgent    String
  method       String
  url          String
  headers      Json     @default("{}")
  body         String?
  reason       String
  riskScore    Int
  geoLocation  String?
  responseCode Int
  responseTime Int

  @@map("waf_events")
}

// Integration and Testing Tables
model IntegrationTest {
  id          String   @id @default(cuid())
  name        String
  type        String
  status      String   @default("pending")
  config      Json     @default("{}")
  results     Json     @default("{}")
  executedAt  DateTime @default(now())
  executedBy  String
  executedByUser User?  @relation(fields: [executedBy], references: [id])
  duration    Int?
  success     Boolean  @default(false)
  errors      Json     @default("[]")
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("integration_tests")
}

model APIConnector {
  id           String    @id @default(cuid())
  name         String
  type         String
  endpoint     String
  config       Json      @default("{}")
  status       String    @default("active")
  lastSync     DateTime?
  syncInterval Int       @default(300)
  enabled      Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String?
  user         User?     @relation(fields: [createdBy], references: [id])
  tenantId     String?
  tenant       Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("api_connectors")
}

model WidgetBlueprint {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  config      Json     @default("{}")
  template    String
  version     String   @default("1.0.0")
  published   Boolean  @default(false)
  createdBy   String
  creator     User     @relation("BlueprintCreator", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("widget_blueprints")
}

model CanvasProject {
  id          String   @id @default(cuid())
  name        String
  description String?
  layout      Json     @default("{}")
  widgets     Json     @default("[]")
  settings    Json     @default("{}")
  published   Boolean  @default(false)
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("canvas_projects")
}

// Analytics and Metrics
model MetricSnapshot {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  category  String
  metrics   Json     @default("{}")
  metadata  Json     @default("{}")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("metric_snapshots")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  eventType  String
  properties Json     @default("{}")
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  sessionId  String?
  tenantId   String?
  tenant     Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("analytics_events")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  resource  String
  details   Json     @default("{}")
  ipAddress String?
  userAgent String?
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("audit_logs")
}

// =========================================
// ENTERPRISE INTEGRATION & ECOSYSTEM MODELS
// =========================================

// ERP System Integration
model ERPIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "sap", "oracle", "microsoft_dynamics", "netsuite", "workday"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active") // "active", "inactive", "error", "syncing"
  lastSync      DateTime?
  syncInterval  Int      @default(3600) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      ERPSyncLog[]
  mappings      ERPDataMapping[]

  @@map("erp_integrations")
}

model ERPSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   ERPIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String   // "import", "export", "sync", "validate"
  status        String   @default("started") // "started", "completed", "failed", "cancelled"
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("erp_sync_logs")
}

model ERPDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   ERPIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("erp_data_mappings")
}

// CRM Platform Integration
model CRMIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "salesforce", "hubspot", "microsoft_crm", "pipedrive", "zoho"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(1800) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      CRMSyncLog[]
  mappings      CRMDataMapping[]

  @@map("crm_integrations")
}

model CRMSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   CRMIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("crm_sync_logs")
}

model CRMDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   CRMIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("crm_data_mappings")
}

// HR System Integration
model HRIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "workday", "bamboohr", "adp", "successfactors", "cornerstoneонdemand"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(7200) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      HRSyncLog[]
  mappings      HRDataMapping[]

  @@map("hr_integrations")
}

model HRSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   HRIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("hr_sync_logs")
}

// Widget Factory Models
model BlueprintDefinition {
  id            String   @id @default(cuid())
  name          String
  description   String?
  version       String   @default("1.0")
  category      String   @default("general")
  author        String   @default("system")
  type          String   @default("widget")
  tags          String[] @default([])
  composition   Json     @default("{}")
  validation    Json     @default("{}")
  inheritance   Json     @default("{}")
  configuration Json     @default("{}")
  schema        Json     @default("{}")
  metadata      Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  instances BlueprintInstance[]

  @@map("blueprint_definitions")
}

model BlueprintInstance {
  id            String              @id @default(cuid())
  definitionId  String
  blueprintId   String              // Alias for definitionId
  definition    BlueprintDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  name          String
  version       String              @default("1.0")
  config        Json                @default("{}")
  status        String              @default("active")
  state         String              @default("draft")
  isBuilt       Boolean             @default(false)
  buildErrors   String[]            @default([])
  canvasId      String?
  tenantId      String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdBy     String

  @@map("blueprint_instances")
}

model Canvas {
  id            String   @id @default(cuid())
  name          String
  description   String?
  layout        Json     @default("{}")
  elements      Json     @default("[]")
  viewport      Json     @default("{}")
  grid          Json     @default("{}")
  layers        Json     @default("[]")
  activeLayer   String?
  performance   Json     @default("{}")
  metadata      Json     @default("{}")
  active        Boolean  @default(true)
  tenantId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  @@map("canvases")
}

model CollaborationSession {
  id            String   @id @default(cuid())
  name          String
  type          String   @default("widget_design")
  userName      String?
  userId        String?
  userColor     String?
  canvasId      String?
  cursor        Json     @default("{}")
  participants  Json     @default("[]")
  settings      Json     @default("{}")
  status        String   @default("active")
  isActive      Boolean  @default(true)
  startedAt     DateTime @default(now())
  endedAt       DateTime?
  lastSeen      DateTime @default(now())
  createdBy     String
  creator       User     @relation(fields: [createdBy], references: [id])
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  @@map("collaboration_sessions")
}

model HRDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   HRIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("hr_data_mappings")
}

// Financial System Integration
model FinancialIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "quickbooks", "netsuite", "xero", "sage", "freshbooks"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  syncSettings  Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  syncInterval  Int      @default(3600) // in seconds
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  syncLogs      FinancialSyncLog[]
  mappings      FinancialDataMapping[]

  @@map("financial_integrations")
}

model FinancialSyncLog {
  id            String   @id @default(cuid())
  integrationId String
  integration   FinancialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  syncId        String   @unique
  operation     String
  status        String   @default("started")
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@map("financial_sync_logs")
}

model FinancialDataMapping {
  id            String   @id @default(cuid())
  integrationId String
  integration   FinancialIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  sourceField   String
  targetField   String
  transformation Json    @default("{}")
  required      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([integrationId, sourceField, targetField])
  @@map("financial_data_mappings")
}

// Cloud Platform Integration
model CloudIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "aws", "azure", "gcp", "alibaba", "oracle_cloud"
  region        String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  services      Json     @default("[]") // ["compute", "storage", "database", "ai", "analytics"]
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  resources     CloudResource[]
  deployments   CloudDeployment[]

  @@map("cloud_integrations")
}

model CloudResource {
  id            String   @id @default(cuid())
  integrationId String
  integration   CloudIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  resourceId    String
  name          String
  type          String   // "vm", "container", "function", "storage", "database"
  status        String   @default("running")
  region        String
  config        Json     @default("{}")
  metrics       Json     @default("{}")
  cost          Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, resourceId])
  @@map("cloud_resources")
}

model CloudDeployment {
  id            String   @id @default(cuid())
  integrationId String
  integration   CloudIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  deploymentId  String
  name          String
  type          String   // "kubernetes", "docker", "serverless", "vm"
  status        String   @default("pending")
  config        Json     @default("{}")
  logs          Json     @default("[]")
  startTime     DateTime @default(now())
  endTime       DateTime?
  metadata      Json     @default("{}")

  @@unique([integrationId, deploymentId])
  @@map("cloud_deployments")
}

// API Gateway & Management
model APIGateway {
  id            String   @id @default(cuid())
  name          String
  description   String
  baseUrl       String
  version       String   @default("1.0")
  status        String   @default("active")
  rateLimitConfig Json   @default("{}")
  authentication Json    @default("{}")
  middleware    Json     @default("[]")
  monitoring    Boolean  @default(true)
  analytics     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  endpoints     APIEndpoint[]
  apiKeys       APIKey[]
  rateLimits    APIRateLimit[]

  @@map("api_gateways")
}

model APIEndpoint {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  path        String
  method      String   // "GET", "POST", "PUT", "DELETE", "PATCH"
  description String
  handler     String
  middleware  Json     @default("[]")
  rateLimits  Json     @default("{}")
  auth        Json     @default("{}")
  validation  Json     @default("{}")
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json     @default("{}")

  analytics   APIAnalytics[]

  @@unique([gatewayId, path, method])
  @@map("api_endpoints")
}

model APIKey {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  keyId       String   @unique
  name        String
  description String?
  key         String   @unique
  scopes      String[]
  rateLimits  Json     @default("{}")
  expiresAt   DateTime?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json     @default("{}")

  @@map("api_keys")
}

model APIRateLimit {
  id          String   @id @default(cuid())
  gatewayId   String
  gateway     APIGateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  keyId       String?
  endpoint    String?
  limit       Int      @default(1000)
  window      Int      @default(3600) // in seconds
  current     Int      @default(0)
  resetTime   DateTime @default(now())
  metadata    Json     @default("{}")

  @@unique([gatewayId, keyId, endpoint])
  @@map("api_rate_limits")
}

model APIAnalytics {
  id          String   @id @default(cuid())
  endpointId  String
  endpoint    APIEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  timestamp   DateTime @default(now())
  method      String
  path        String
  statusCode  Int
  responseTime Int     // in milliseconds
  requestSize  Int     @default(0)
  responseSize Int     @default(0)
  userAgent   String?
  ipAddress   String?
  apiKey      String?
  metadata    Json     @default("{}")

  @@map("api_analytics")
}

// Workflow Automation & Orchestration
model WorkflowEngine {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "sequential", "parallel", "conditional", "event_driven"
  status        String   @default("active")
  config        Json     @default("{}")
  triggers      Json     @default("[]")
  actions       Json     @default("[]")
  conditions    Json     @default("[]")
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  workflows     Workflow[]
  executions    WorkflowExecution[]

  @@map("workflow_engines")
}

model Workflow {
  id            String   @id @default(cuid())
  engineId      String
  engine        WorkflowEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)
  name          String
  description   String
  type          String   // "approval", "automation", "integration", "notification"
  definition    Json     @default("{}")
  config        Json     @default("{}")
  triggers      Json     @default("[]")
  steps         Json     @default("[]")
  conditions    Json     @default("[]")
  version       String   @default("1.0")
  status        String   @default("draft") // "draft", "active", "inactive", "deprecated"
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  executions    WorkflowExecution[]

  @@map("workflows")
}

model WorkflowExecution {
  id            String   @id @default(cuid())
  workflowId    String
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  engineId      String
  engine        WorkflowEngine @relation(fields: [engineId], references: [id], onDelete: Cascade)
  executionId   String   @unique
  triggeredBy   String
  startTime     DateTime @default(now())
  endTime       DateTime?
  status        String   @default("running") // "running", "completed", "failed", "cancelled", "paused"
  currentStep   Int      @default(0)
  steps         Json     @default("[]")
  variables     Json     @default("{}")
  results       Json     @default("{}")
  errors        Json     @default("[]")
  metadata      Json     @default("{}")

  @@map("workflow_executions")
}

// ETL & Data Integration
model ETLPipeline {
  id            String   @id @default(cuid())
  name          String
  description   String
  type          String   // "extract", "transform", "load", "etl", "elt"
  source        Json     @default("{}")
  destination   Json     @default("{}")
  transformation Json    @default("{}")
  schedule      String   // cron expression
  status        String   @default("active")
  lastRun       DateTime?
  nextRun       DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String
  metadata      Json     @default("{}")

  runs          ETLRun[]

  @@map("etl_pipelines")
}

model ETLRun {
  id            String   @id @default(cuid())
  pipelineId    String
  pipeline      ETLPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  runId         String   @unique
  startTime     DateTime @default(now())
  endTime       DateTime?
  status        String   @default("running") // "running", "completed", "failed", "cancelled"
  recordsProcessed Int   @default(0)
  recordsSucceeded Int   @default(0)
  recordsFailed    Int   @default(0)
  errors        Json     @default("[]")
  logs          Json     @default("[]")
  metrics       Json     @default("{}")
  metadata      Json     @default("{}")

  @@map("etl_runs")
}

// Communication & Collaboration Integration
model CommunicationIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "slack", "teams", "email", "zoom", "webex"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  channels      CommunicationChannel[]
  messages      CommunicationMessage[]

  @@map("communication_integrations")
}

model CommunicationChannel {
  id            String   @id @default(cuid())
  integrationId String
  integration   CommunicationIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  channelId     String
  name          String
  type          String   // "public", "private", "direct", "group"
  description   String?
  members       Json     @default("[]")
  config        Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, channelId])
  @@map("communication_channels")
}

model CommunicationMessage {
  id            String   @id @default(cuid())
  integrationId String
  integration   CommunicationIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  messageId     String
  channelId     String
  senderId      String
  content       String
  type          String   // "text", "file", "image", "audio", "video"
  timestamp     DateTime @default(now())
  metadata      Json     @default("{}")

  @@unique([integrationId, messageId])
  @@map("communication_messages")
}

// Business Intelligence Integration
model BIIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String   // "tableau", "powerbi", "looker", "qlik", "sisense"
  version       String
  endpoint      String
  credentials   Json     @default("{}")
  config        Json     @default("{}")
  status        String   @default("active")
  lastSync      DateTime?
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")
  tenantId      String?
  tenant        Tenant?  @relation(fields: [tenantId], references: [id])

  dashboards    BIDashboard[]
  reports       BIReport[]

  @@map("bi_integrations")
}

model BIDashboard {
  id            String   @id @default(cuid())
  integrationId String
  integration   BIIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  dashboardId   String
  name          String
  description   String?
  url           String?
  config        Json     @default("{}")
  widgets       Json     @default("[]")
  permissions   Json     @default("{}")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, dashboardId])
  @@map("bi_dashboards")
}

model BIReport {
  id            String   @id @default(cuid())
  integrationId String
  integration   BIIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  reportId      String
  name          String
  description   String?
  type          String   // "scheduled", "ad_hoc", "real_time"
  config        Json     @default("{}")
  schedule      String?  // cron expression
  recipients    Json     @default("[]")
  lastRun       DateTime?
  nextRun       DateTime?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([integrationId, reportId])
  @@map("bi_reports")
}

// Enterprise Marketplace
model MarketplaceApp {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String   // "integration", "automation", "analytics", "security", "productivity"
  publisher     String
  version       String
  logo          String?
  screenshots   Json     @default("[]")
  pricing       Json     @default("{}")
  features      Json     @default("[]")
  requirements  Json     @default("{}")
  config        Json     @default("{}")
  permissions   Json     @default("[]")
  status        String   @default("pending") // "pending", "approved", "rejected", "published", "deprecated"
  downloads     Int      @default(0)
  rating        Float    @default(0.0)
  reviews       Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  installations MarketplaceInstallation[]

  @@map("marketplace_apps")
}

model MarketplaceInstallation {
  id            String   @id @default(cuid())
  appId         String
  app           MarketplaceApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  tenantId      String
  userId        String
  version       String
  config        Json     @default("{}")
  status        String   @default("installing") // "installing", "installed", "failed", "updating", "uninstalling"
  installedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  metadata      Json     @default("{}")

  @@unique([appId, tenantId])
  @@map("marketplace_installations")
}
