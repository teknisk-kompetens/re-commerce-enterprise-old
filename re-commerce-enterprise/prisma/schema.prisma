generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/re-commerce-enterprise/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANT ENTERPRISE SCHEMA
// ============================================

// Core Tenant Model - Foundation for Multi-Tenancy
model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  subdomain   String   @unique
  isActive    Boolean  @default(true)
  plan        String   @default("basic") // basic, pro, enterprise
  maxUsers    Int      @default(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tenant Settings
  settings    Json?
  branding    Json?
  
  // Relationships - All data belongs to tenant
  users       User[]
  tasks       Task[]
  projects    Project[]
  categories  Category[]
  
  // RBAC & Security Relationships
  roles       Role[]
  userRoles   UserRole[]
  userPermissions UserPermission[]
  auditLogs   AuditLog[]
  rateLimits  RateLimit[]
  systemEvents SystemEvent[]
  tenantFeatureFlags TenantFeatureFlag[]
  
  // DAG 2 relationships
  dashboardWidgets DashboardWidget[]
  analytics       Analytics[]
  workflows       Workflow[]
  workflowExecutions WorkflowExecution[]
  workflowTriggers WorkflowTrigger[]
  notifications   Notification[]
  activityFeeds   ActivityFeed[]
  comments        Comment[]
  attachments     Attachment[]
  apiKeys         ApiKey[]
  webhooks        Webhook[]
  webhookDeliveries WebhookDelivery[]
  
  // DAG 4 relationships
  aiInsights      AiInsight[]
  predictiveAnalytics PredictiveAnalytics[]
  securityEvents  SecurityEvent[]
  complianceRecords ComplianceRecord[]
  threatDetections ThreatDetection[]
  performanceMetrics PerformanceMetric[]
  optimizationRecommendations OptimizationRecommendation[]
  integrations    Integration[]
  integrationExecutions IntegrationExecution[]
  integrationWebhooks IntegrationWebhook[]
  apiConnectors   ApiConnector[]

  // DAG 5 relationships - Enterprise Completion
  systemHealthMetrics SystemHealthMetric[]
  testSuites      TestSuite[]
  testExecutions  TestExecution[]
  integrationValidations IntegrationValidation[]
  documentationCenter DocumentationCenter[]
  trainingModules TrainingModule[]
  apiDocumentation ApiDocumentation[]
  knowledgeBase   KnowledgeBase[]
  videoTutorials  VideoTutorial[]
  productionReadinessChecklist ProductionReadinessChecklist[]
  deploymentValidations DeploymentValidation[]
  environmentConfigurations EnvironmentConfiguration[]
  launchPreparations LaunchPreparation[]
  executiveMetrics ExecutiveMetric[]
  roiTracking     ROITracking[]
  successMetrics  SuccessMetric[]
  performanceBenchmarks PerformanceBenchmark[]
  businessIntelligence BusinessIntelligence[]
  commandCenterWidgets CommandCenterWidget[]
  platformStatus  PlatformStatus[]
  featureCompleteness FeatureCompleteness[]

  // Indexes for performance
  @@index([domain])
  @@index([subdomain])
  @@index([isActive])
  @@map("tenants")
}

// User Management with Tenant Isolation & Enterprise Features
model User {
  id          String   @id @default(cuid())
  email       String
  name        String?
  password    String?
  role        String   @default("user") // user, manager, admin, owner
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // TENANT ISOLATION - Critical for multi-tenancy
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Enhanced Security & Authentication
  emailVerified    DateTime?
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  
  // Multi-Factor Authentication
  mfaEnabled       Boolean  @default(false)
  mfaSecret        String?
  mfaBackupCodes   String[]
  
  // Session Management
  maxSessions      Int      @default(5)
  sessionTimeout   Int      @default(3600) // seconds
  
  // User profile data
  profile     Json?
  preferences Json?
  
  // Relationships
  tasks       Task[]
  projects    Project[]
  roles       UserRole[]
  permissions UserPermission[]
  auditLogs   AuditLog[]
  
  // NextAuth relations
  accounts    Account[]
  sessions    Session[]
  
  // DAG 2 relationships
  dashboardWidgets DashboardWidget[]
  analytics       Analytics[]
  workflows       Workflow[]
  workflowExecutions WorkflowExecution[]
  notifications   Notification[]
  notificationsSent Notification[] @relation("NotificationSender")
  activityFeeds   ActivityFeed[]
  comments        Comment[]
  attachments     Attachment[]
  apiKeys         ApiKey[]
  webhooks        Webhook[]
  
  // DAG 4 relationships
  aiInsights      AiInsight[]
  securityEvents  SecurityEvent[]
  integrations    Integration[]
  apiConnectors   ApiConnector[]

  // DAG 5 relationships - Enterprise Completion
  documentationAuthored DocumentationCenter[]
  knowledgeBaseAuthored KnowledgeBase[]
  productionChecklistAssigned ProductionReadinessChecklist[]
  launchPreparationsAssigned LaunchPreparation[]
  commandCenterWidgetsCreated CommandCenterWidget[]
  
  // Compound unique constraint for email per tenant
  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([tenantId, email])
  @@index([tenantId, role])
  @@index([tenantId, isActive])
  @@map("users")
}

// Task Management with Tenant Isolation
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("medium") // low, medium, high, urgent
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // TENANT ISOLATION - Critical for multi-tenancy
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // User assignment
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Category assignment
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Project assignment
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  // Metadata
  tags        String[]
  attachments Json?
  
  // Performance indexes
  @@index([tenantId])
  @@index([tenantId, userId])
  @@index([tenantId, completed])
  @@index([tenantId, priority])
  @@index([tenantId, dueDate])
  @@map("tasks")
}

// Project Management with Tenant Isolation
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // TENANT ISOLATION - Critical for multi-tenancy
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Project owner
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Relationships
  tasks       Task[]
  
  // Metadata
  settings    Json?
  
  // Performance indexes
  @@index([tenantId])
  @@index([tenantId, ownerId])
  @@index([tenantId, isActive])
  @@map("projects")
}

// Category Management with Tenant Isolation
model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#6b7280")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // TENANT ISOLATION - Critical for multi-tenancy
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relationships
  tasks       Task[]
  
  // Unique constraint for category name per tenant
  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("categories")
}

// Session Management for NextAuth with Tenant Context
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // TENANT CONTEXT - Track which tenant session belongs to
  tenantId     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tenantId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ============================================
// RBAC (Role-Based Access Control) SYSTEM
// ============================================

model Role {
  id          String   @id @default(cuid())
  name        String   // SuperAdmin, TenantAdmin, Manager, User, ReadOnly
  description String?
  isSystem    Boolean  @default(false) // System roles vs custom roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // TENANT ISOLATION - Roles are tenant-specific (except system roles)
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Relationships
  permissions RolePermission[]
  users       UserRole[]
  
  // Unique constraint for role name per tenant
  @@unique([name, tenantId])
  @@index([tenantId])
  @@index([tenantId, name])
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   // users:read, users:write, tasks:read, tasks:write, etc.
  resource    String   // users, tasks, projects, categories, settings
  action      String   // read, write, delete, manage
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relationships
  roles       RolePermission[]
  users       UserPermission[]
  
  // Unique constraint for permission name
  @@unique([name])
  @@index([resource])
  @@index([resource, action])
  @@map("permissions")
}

model UserRole {
  id       String @id @default(cuid())
  userId   String
  roleId   String
  assignedAt DateTime @default(now())
  assignedBy String?
  
  // TENANT ISOLATION
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId, tenantId])
  @@index([tenantId])
  @@index([tenantId, userId])
  @@map("user_roles")
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean @default(true)
  assignedAt   DateTime @default(now())
  assignedBy   String?
  
  // TENANT ISOLATION
  tenantId     String
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId, tenantId])
  @@index([tenantId])
  @@index([tenantId, userId])
  @@map("user_permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean @default(true)
  
  role         Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ============================================
// AUDIT & SECURITY SYSTEM
// ============================================

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // LOGIN, LOGOUT, CREATE_USER, DELETE_TASK, etc.
  resource    String   // users, tasks, projects, etc.
  resourceId  String?  // ID of the affected resource
  details     Json?    // Additional details about the action
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // User who performed the action
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Performance indexes
  @@index([tenantId])
  @@index([tenantId, userId])
  @@index([tenantId, action])
  @@index([tenantId, resource])
  @@index([tenantId, timestamp])
  @@map("audit_logs")
}

model RateLimit {
  id          String   @id @default(cuid())
  identifier  String   // IP address, user ID, or tenant ID
  type        String   // ip, user, tenant, endpoint
  endpoint    String?  // API endpoint
  requests    Int      @default(0)
  windowStart DateTime @default(now())
  windowEnd   DateTime
  
  // TENANT ISOLATION
  tenantId    String   @default("system")
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([identifier, type, endpoint, tenantId])
  @@index([tenantId])
  @@index([identifier, type])
  @@index([windowEnd])
  @@map("rate_limits")
}

model SystemEvent {
  id          String   @id @default(cuid())
  type        String   // SECURITY, PERFORMANCE, ERROR, WARNING
  severity    String   // LOW, MEDIUM, HIGH, CRITICAL
  message     String
  details     Json?
  timestamp   DateTime @default(now())
  resolved    Boolean  @default(false)
  
  // TENANT ISOLATION (optional for system-wide events)
  tenantId    String?
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Performance indexes
  @@index([tenantId])
  @@index([type])
  @@index([severity])
  @@index([timestamp])
  @@index([resolved])
  @@map("system_events")
}

// ============================================
// ENTERPRISE FEATURES
// ============================================

model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  isEnabled   Boolean  @default(false)
  rolloutPercentage Float @default(0.0)
  conditions  Json?    // Conditions for feature activation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tenant-specific feature flags
  tenantFlags TenantFeatureFlag[]
  
  @@index([key])
  @@index([isEnabled])
  @@map("feature_flags")
}

model TenantFeatureFlag {
  id          String   @id @default(cuid())
  tenantId    String
  featureFlagId String
  isEnabled   Boolean  @default(false)
  rolloutPercentage Float @default(0.0)
  conditions  Json?
  updatedAt   DateTime @updatedAt
  
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  featureFlag FeatureFlag @relation(fields: [featureFlagId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, featureFlagId])
  @@index([tenantId])
  @@map("tenant_feature_flags")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   // STRING, NUMBER, BOOLEAN, JSON
  description String?
  isSecret    Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  
  @@index([key])
  @@map("system_configs")
}

// ============================================
// DAG 2 CORE PLATFORM FEATURES
// ============================================

// Analytics and Metrics
model DashboardWidget {
  id          String   @id @default(cuid())
  title       String
  type        String   // chart, metric, list, table
  config      Json     // Chart configuration, queries, etc.
  position    Json     // x, y, width, height
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User who created the widget
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, userId])
  @@map("dashboard_widgets")
}

model Analytics {
  id          String   @id @default(cuid())
  metric      String   // task_completion, user_activity, project_progress, etc.
  value       Float
  metadata    Json?    // Additional context data
  timestamp   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Associated user (if applicable)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, metric])
  @@index([tenantId, timestamp])
  @@index([tenantId, metric, timestamp])
  @@map("analytics")
}

// Workflow Management
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  definition  Json     // Workflow definition (nodes, edges, conditions)
  isActive    Boolean  @default(true)
  isTemplate  Boolean  @default(false)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Creator
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Relationships
  executions  WorkflowExecution[]
  triggers    WorkflowTrigger[]

  @@index([tenantId])
  @@index([tenantId, isActive])
  @@index([tenantId, isTemplate])
  @@map("workflows")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  status      String   // pending, running, completed, failed, cancelled
  startedAt   DateTime @default(now())
  completedAt DateTime?
  data        Json?    // Execution context and variables
  logs        Json[]   // Execution logs
  error       String?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Workflow reference
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // User who triggered the execution
  triggeredBy String?
  user        User?    @relation(fields: [triggeredBy], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, workflowId])
  @@index([tenantId, startedAt])
  @@map("workflow_executions")
}

model WorkflowTrigger {
  id          String   @id @default(cuid())
  type        String   // manual, schedule, event, webhook
  config      Json     // Trigger configuration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Workflow reference
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, isActive])
  @@map("workflow_triggers")
}

// Real-time Features
model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        String   // info, success, warning, error, task, project, system
  isRead      Boolean  @default(false)
  data        Json?    // Additional notification data
  createdAt   DateTime @default(now())
  readAt      DateTime?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Recipient
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Sender (optional)
  senderId    String?
  sender      User?    @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, userId])
  @@index([tenantId, userId, isRead])
  @@index([tenantId, userId, createdAt])
  @@map("notifications")
}

model ActivityFeed {
  id          String   @id @default(cuid())
  action      String   // created, updated, deleted, commented, assigned, etc.
  entity      String   // task, project, user, workflow, etc.
  entityId    String
  description String
  metadata    Json?    // Additional context
  timestamp   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User who performed the action
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, entity])
  @@index([tenantId, entityId])
  @@index([tenantId, timestamp])
  @@index([tenantId, userId])
  @@map("activity_feeds")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  entity      String   // task, project, workflow, etc.
  entityId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Author
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Reply to another comment
  parentId    String?
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Comment[] @relation("CommentReplies")

  @@index([tenantId])
  @@index([tenantId, entity, entityId])
  @@index([tenantId, authorId])
  @@index([tenantId, createdAt])
  @@map("comments")
}

// ============================================
// DAG 4 ADVANCED ENTERPRISE FEATURES
// ============================================

// AI-Powered Analytics & Intelligence
model AiInsight {
  id          String   @id @default(cuid())
  type        String   // predictive, recommendation, optimization, alert
  category    String   // performance, security, business, user_behavior
  title       String
  description String
  confidence  Float    // 0.0 to 1.0
  impact      String   // low, medium, high, critical
  data        Json     // Insight data and supporting metrics
  status      String   @default("active") // active, dismissed, implemented
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  validUntil  DateTime?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Associated user (if applicable)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, category])
  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@map("ai_insights")
}

model PredictiveAnalytics {
  id          String   @id @default(cuid())
  metric      String   // revenue, user_growth, churn_risk, performance_trend
  prediction  Json     // Prediction data and confidence intervals
  timeframe   String   // daily, weekly, monthly, quarterly
  accuracy    Float?   // Historical accuracy of this prediction type
  createdAt   DateTime @default(now())
  validUntil  DateTime

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, metric])
  @@index([tenantId, validUntil])
  @@map("predictive_analytics")
}

// Advanced Security & Compliance
model SecurityEvent {
  id          String   @id @default(cuid())
  type        String   // login_attempt, data_access, permission_change, threat_detected
  severity    String   // low, medium, high, critical
  source      String   // user_action, system, external, ai_detection
  title       String
  description String
  metadata    Json     // Event details, IP, user agent, etc.
  status      String   @default("open") // open, investigating, resolved, false_positive
  timestamp   DateTime @default(now())
  resolvedAt  DateTime?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Associated user (if applicable)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([tenantId, timestamp])
  @@map("security_events")
}

model ComplianceRecord {
  id          String   @id @default(cuid())
  framework   String   // GDPR, SOX, HIPAA, ISO27001, PCI_DSS
  requirement String   // Specific requirement ID
  status      String   // compliant, non_compliant, partial, pending_review
  evidence    Json?    // Supporting documentation and evidence
  lastCheck   DateTime @default(now())
  nextCheck   DateTime
  assignedTo  String?  // User responsible for compliance
  notes       String?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, framework])
  @@index([tenantId, status])
  @@index([tenantId, nextCheck])
  @@map("compliance_records")
}

model ThreatDetection {
  id          String   @id @default(cuid())
  type        String   // brute_force, anomaly, malware, phishing, data_exfiltration
  severity    String   // low, medium, high, critical
  source      String   // ip_address, user_id, endpoint, external_feed
  sourceValue String   // Actual IP, user ID, etc.
  confidence  Float    // AI confidence score 0.0 to 1.0
  details     Json     // Detection details and evidence
  status      String   @default("active") // active, resolved, false_positive
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  resolvedAt  DateTime?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([tenantId, sourceValue])
  @@map("threat_detections")
}

// Performance Optimization
model PerformanceMetric {
  id          String   @id @default(cuid())
  metric      String   // response_time, cpu_usage, memory_usage, disk_io, network_io
  value       Float
  unit        String   // ms, %, MB, GB, requests/sec
  source      String   // server, database, api, frontend, cdn
  endpoint    String?  // Specific endpoint or service
  timestamp   DateTime @default(now())
  metadata    Json?    // Additional metric context

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, metric])
  @@index([tenantId, source])
  @@index([tenantId, timestamp])
  @@index([tenantId, metric, timestamp])
  @@map("performance_metrics")
}

model OptimizationRecommendation {
  id          String   @id @default(cuid())
  category    String   // performance, security, cost, scalability
  title       String
  description String
  impact      String   // low, medium, high, critical
  effort      String   // low, medium, high
  priority    Int      // 1-10 priority score
  status      String   @default("pending") // pending, implementing, completed, dismissed
  estimatedImprovement Json // Expected performance/cost improvements
  implementation Json   // Implementation steps and requirements
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, priority])
  @@index([tenantId, status])
  @@map("optimization_recommendations")
}

// Integration Ecosystem
model Integration {
  id          String   @id @default(cuid())
  name        String
  type        String   // api, webhook, database, file_sync, messaging
  category    String   // crm, payment, analytics, communication, storage
  provider    String   // Third-party service provider
  status      String   @default("inactive") // active, inactive, error, configuring
  config      Json     // Integration configuration
  credentials Json?    // Encrypted connection credentials
  endpoints   Json?    // API endpoints and webhook URLs
  rateLimits  Json?    // Rate limiting configuration
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User who configured the integration
  configuredBy String
  user        User     @relation(fields: [configuredBy], references: [id])

  // Relationships
  executions  IntegrationExecution[]
  webhooks    IntegrationWebhook[]

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, status])
  @@index([tenantId, provider])
  @@map("integrations")
}

model IntegrationExecution {
  id          String   @id @default(cuid())
  status      String   // success, error, timeout, retrying
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // Execution time in milliseconds
  recordsProcessed Int? // Number of records processed
  errorMessage String?
  logs        Json[]   // Execution logs
  metadata    Json?    // Additional execution context

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Integration reference
  integrationId String
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, integrationId])
  @@index([tenantId, startTime])
  @@map("integration_executions")
}

model IntegrationWebhook {
  id          String   @id @default(cuid())
  url         String
  events      String[] // List of events to subscribe to
  secret      String?  // Webhook secret for verification
  isActive    Boolean  @default(true)
  retryPolicy Json?    // Retry configuration
  lastDelivery DateTime?
  createdAt   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Integration reference
  integrationId String
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  // Webhook deliveries
  deliveries  WebhookDelivery[]

  @@index([tenantId])
  @@index([tenantId, integrationId])
  @@index([tenantId, isActive])
  @@map("integration_webhooks")
}

model ApiConnector {
  id          String   @id @default(cuid())
  name        String
  type        String   // rest, graphql, soap, grpc
  baseUrl     String
  auth        Json     // Authentication configuration
  headers     Json?    // Default headers
  rateLimits  Json?    // Rate limiting rules
  timeout     Int      @default(30000) // Timeout in milliseconds
  retryPolicy Json?    // Retry configuration
  isActive    Boolean  @default(true)
  healthCheck Json?    // Health check configuration
  lastHealthCheck DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // User who created the connector
  createdBy   String
  user        User     @relation(fields: [createdBy], references: [id])

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, isActive])
  @@map("api_connectors")
}

// File attachments
model Attachment {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  entity      String   // task, project, comment, etc.
  entityId    String
  createdAt   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Uploader
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, entity, entityId])
  @@index([tenantId, uploadedBy])
  @@map("attachments")
}

// API Keys and Webhooks
model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] // API permissions
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Created by
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([key])
  @@index([tenantId, isActive])
  @@map("api_keys")
}

model Webhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  events      String[] // Events to listen for
  isActive    Boolean  @default(true)
  secret      String?  // Webhook secret for verification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Created by
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Relationships
  deliveries  WebhookDelivery[]

  @@index([tenantId])
  @@index([tenantId, isActive])
  @@map("webhooks")
}

model WebhookDelivery {
  id          String   @id @default(cuid())
  webhookId   String
  webhook     Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  event       String
  payload     Json
  response    Json?
  statusCode  Int?
  attempt     Int      @default(1)
  deliveredAt DateTime @default(now())
  success     Boolean  @default(false)

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Integration webhook relationship (optional)
  integrationWebhookId String?
  integrationWebhook   IntegrationWebhook? @relation(fields: [integrationWebhookId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([tenantId, webhookId])
  @@index([tenantId, event])
  @@index([tenantId, success])
  @@index([tenantId, integrationWebhookId])
  @@map("webhook_deliveries")
}

// ============================================
// DAY 5 - ENTERPRISE COMPLETION MODELS
// ============================================

// System Health & Testing Models
model SystemHealthMetric {
  id          String   @id @default(cuid())
  category    String   // system, database, api, integration, security
  metric      String   // cpu_usage, memory_usage, response_time, error_rate, uptime
  value       Float
  threshold   Float?   // Alert threshold
  status      String   // healthy, warning, critical
  unit        String?  // %, ms, mb, count
  metadata    Json?    // Additional context data
  timestamp   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, metric])
  @@index([tenantId, status])
  @@index([tenantId, timestamp])
  @@map("system_health_metrics")
}

model TestSuite {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // unit, integration, e2e, performance, security
  framework   String   // jest, cypress, playwright, k6
  config      Json?    // Test configuration
  schedule    String?  // Cron schedule for automated runs
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relationships
  executions  TestExecution[]

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, isActive])
  @@map("test_suites")
}

model TestExecution {
  id          String   @id @default(cuid())
  suiteId     String
  suite       TestSuite @relation(fields: [suiteId], references: [id], onDelete: Cascade)
  status      String   // running, passed, failed, skipped
  startTime   DateTime @default(now())
  endTime     DateTime?
  duration    Int?     // Duration in milliseconds
  results     Json?    // Detailed test results
  coverage    Float?   // Code coverage percentage
  failureReason String?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, suiteId])
  @@index([tenantId, status])
  @@index([tenantId, startTime])
  @@map("test_executions")
}

model IntegrationValidation {
  id          String   @id @default(cuid())
  name        String
  endpoint    String   // API endpoint or service to validate
  method      String   @default("GET") // HTTP method
  headers     Json?    // Request headers
  payload     Json?    // Request payload for POST/PUT
  expectedStatus Int   @default(200)
  expectedResponse Json? // Expected response structure
  timeout     Int      @default(30000)
  lastCheck   DateTime?
  status      String   // healthy, degraded, down, unknown
  responseTime Float?  // Last response time in ms
  errorMessage String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([tenantId, isActive])
  @@map("integration_validations")
}

// Documentation & Training Models
model DocumentationCenter {
  id          String   @id @default(cuid())
  title       String
  content     String   // Markdown content
  category    String   // getting-started, api, tutorials, troubleshooting
  tags        String[]
  version     String   @default("1.0")
  isPublished Boolean  @default(false)
  viewCount   Int      @default(0)
  lastViewed  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Author
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, isPublished])
  @@map("documentation_center")
}

model TrainingModule {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   // Training content
  type        String   // video, interactive, quiz, document
  duration    Int?     // Duration in minutes
  difficulty  String   @default("beginner") // beginner, intermediate, advanced
  prerequisites String[]
  objectives  String[]
  isRequired  Boolean  @default(false)
  completionRate Float @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, type])
  @@index([tenantId, difficulty])
  @@map("training_modules")
}

model ApiDocumentation {
  id          String   @id @default(cuid())
  endpoint    String
  method      String   // GET, POST, PUT, DELETE
  description String
  parameters  Json?    // Parameter documentation
  requestBody Json?    // Request body schema
  responses   Json?    // Response schemas
  examples    Json?    // Example requests/responses
  tags        String[]
  isDeprecated Boolean @default(false)
  version     String   @default("1.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, method])
  @@index([tenantId, isDeprecated])
  @@map("api_documentation")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // faq, troubleshooting, best-practices, guides
  subcategory String?
  keywords    String[]
  difficulty  String   @default("basic") // basic, intermediate, advanced
  helpfulness Float   @default(0.0) // User rating 0-5
  viewCount   Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Author
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, isPublic])
  @@map("knowledge_base")
}

model VideoTutorial {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String   // URL to video file or embed
  thumbnail   String?  // Thumbnail image URL
  duration    Int?     // Duration in seconds
  category    String   // onboarding, features, advanced, troubleshooting
  difficulty  String   @default("beginner")
  transcript  String?  // Video transcript for accessibility
  views       Int      @default(0)
  rating      Float    @default(0.0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, isPublished])
  @@map("video_tutorials")
}

// Go-Live Preparation Models
model ProductionReadinessChecklist {
  id          String   @id @default(cuid())
  category    String   // security, performance, infrastructure, compliance, testing
  item        String   // Checklist item description
  description String?  // Detailed description
  priority    String   @default("medium") // low, medium, high, critical
  status      String   @default("pending") // pending, in-progress, completed, blocked
  assignedTo  String?  // User responsible
  dueDate     DateTime?
  completedAt DateTime?
  notes       String?
  evidence    Json?    // Links to documentation, test results, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Assigned user
  assignee    User?    @relation(fields: [assignedTo], references: [id])

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, status])
  @@index([tenantId, priority])
  @@map("production_readiness_checklist")
}

model DeploymentValidation {
  id          String   @id @default(cuid())
  environment String   // development, staging, production
  component   String   // database, api, frontend, infrastructure
  check       String   // Specific validation check
  status      String   // passed, failed, warning, skipped
  result      Json?    // Detailed validation results
  errorMessage String?
  lastRun     DateTime @default(now())
  duration    Int?     // Validation duration in ms
  isRequired  Boolean  @default(true)
  
  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, environment])
  @@index([tenantId, status])
  @@map("deployment_validations")
}

model EnvironmentConfiguration {
  id          String   @id @default(cuid())
  environment String   // development, staging, production
  category    String   // database, api, frontend, security
  key         String   // Configuration key
  value       String?  // Configuration value (encrypted if sensitive)
  type        String   // string, number, boolean, json, secret
  isRequired  Boolean  @default(false)
  isSensitive Boolean  @default(false)
  description String?
  lastUpdated DateTime @updatedAt
  isValid     Boolean  @default(true)
  
  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, environment])
  @@index([tenantId, category])
  @@map("environment_configurations")
}

model LaunchPreparation {
  id          String   @id @default(cuid())
  phase       String   // pre-launch, launch, post-launch
  task        String   // Specific launch task
  description String?
  status      String   @default("pending") // pending, in-progress, completed, blocked
  priority    String   @default("medium")
  estimatedHours Float?
  actualHours Float?
  assignedTo  String?
  startDate   DateTime?
  targetDate  DateTime?
  completedAt DateTime?
  dependencies String[] // Other task IDs this depends on
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Assigned user
  assignee    User?    @relation(fields: [assignedTo], references: [id])

  @@index([tenantId])
  @@index([tenantId, phase])
  @@index([tenantId, status])
  @@map("launch_preparations")
}

// Success Metrics & KPIs Models
model ExecutiveMetric {
  id          String   @id @default(cuid())
  category    String   // financial, operational, customer, growth
  metric      String   // revenue, user_growth, churn_rate, nps, etc.
  value       Float
  previousValue Float?
  target      Float?
  unit        String?  // $, %, count, ratio
  period      String   // daily, weekly, monthly, quarterly, yearly
  date        DateTime
  trend       String?  // up, down, stable
  variance    Float?   // Percentage change from previous period
  insights    String?  // AI-generated insights
  createdAt   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, metric])
  @@index([tenantId, date])
  @@map("executive_metrics")
}

model ROITracking {
  id          String   @id @default(cuid())
  initiative  String   // Project or initiative name
  category    String   // technology, marketing, operations, hr
  investment  Float    // Total investment amount
  returns     Float    // Measured returns
  roi         Float    // Calculated ROI percentage
  period      String   // Time period for measurement
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("active") // active, completed, cancelled
  description String?
  methodology String?  // How ROI was calculated
  confidence  Float?   // Confidence level in measurement
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, status])
  @@map("roi_tracking")
}

model SuccessMetric {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // user_adoption, performance, business, satisfaction
  type        String   // kpi, okr, milestone, benchmark
  target      Float    // Target value
  current     Float    // Current value
  unit        String?  // %, ms, count, $
  frequency   String   // daily, weekly, monthly, quarterly
  owner       String?  // Responsible person/team
  status      String   @default("on-track") // on-track, at-risk, behind, achieved
  lastUpdated DateTime @updatedAt
  dueDate     DateTime?
  notes       String?

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, type])
  @@index([tenantId, status])
  @@map("success_metrics")
}

model PerformanceBenchmark {
  id          String   @id @default(cuid())
  category    String   // system, user, business
  metric      String   // response_time, throughput, conversion_rate
  baseline    Float    // Baseline measurement
  current     Float    // Current measurement
  target      Float    // Target value
  industry    Float?   // Industry benchmark
  percentile  Int?     // Performance percentile (1-100)
  unit        String?
  period      String   // daily, weekly, monthly
  date        DateTime
  trend       String?  // improving, declining, stable
  analysis    String?  // Performance analysis
  recommendations Json? // Improvement recommendations

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, metric])
  @@index([tenantId, date])
  @@map("performance_benchmarks")
}

model BusinessIntelligence {
  id          String   @id @default(cuid())
  report      String   // Report name/type
  category    String   // sales, marketing, operations, finance
  data        Json     // Report data/results
  insights    String[] // Key insights
  recommendations String[] // Action recommendations
  confidence  Float?   // Confidence score 0-1
  period      String   // Report period
  startDate   DateTime
  endDate     DateTime
  generatedAt DateTime @default(now())
  isPublished Boolean  @default(false)
  viewCount   Int      @default(0)

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, isPublished])
  @@map("business_intelligence")
}

// Platform Completion Models
model CommandCenterWidget {
  id          String   @id @default(cuid())
  title       String
  type        String   // metric, chart, status, quick-action, alert
  category    String   // day1, day2, day3, day4, day5, system
  config      Json     // Widget configuration
  position    Json     // Grid position and size
  isVisible   Boolean  @default(true)
  priority    Int      @default(0) // Display priority
  refreshRate Int      @default(30000) // Refresh rate in ms
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Creator
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])

  @@index([tenantId])
  @@index([tenantId, category])
  @@index([tenantId, isVisible])
  @@map("command_center_widgets")
}

model PlatformStatus {
  id          String   @id @default(cuid())
  component   String   // overall, day1, day2, day3, day4, day5, specific service
  status      String   // operational, degraded, down, maintenance
  message     String?  // Status message
  details     Json?    // Additional status details
  severity    String   @default("info") // info, warning, error, critical
  startTime   DateTime @default(now())
  endTime     DateTime?
  isResolved  Boolean  @default(false)
  
  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, component])
  @@index([tenantId, status])
  @@index([tenantId, severity])
  @@map("platform_status")
}

model FeatureCompleteness {
  id          String   @id @default(cuid())
  day         String   // day1, day2, day3, day4, day5
  feature     String   // Specific feature name
  category    String   // core, advanced, integration, security
  status      String   @default("not-started") // not-started, in-progress, completed, verified
  progress    Float    @default(0.0) // Completion percentage 0-100
  description String?
  requirements Json?   // Feature requirements
  testStatus  String?  // Testing status
  lastUpdated DateTime @updatedAt
  completedAt DateTime?
  
  // TENANT ISOLATION
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, day])
  @@index([tenantId, status])
  @@map("feature_completeness")
}


